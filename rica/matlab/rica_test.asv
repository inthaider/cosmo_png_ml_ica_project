
files = {'chirp.mat'
        'gong.mat'
        'handel.mat'
        'laughter.mat'
        'splat.mat'
        'train.mat'};


S = zeros(10000,6);
for i = 1:6
    test     = load(files{i});
    y        = test.y(1:10000,1);
    S(:,i)   = y;
end


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA
% files = {'z_chisq_seeds501982z_3085chi.mat'
%         'zg_chisq_seeds501982z_3085chi.mat'
%         'zng_chisq_seeds501982z_3085chi.mat'};
files = {'zg_chisq_seeds501982z_3085chi.mat'
        'zng_chisq_seeds501982z_3085chi.mat'};

n = 2;
Z = zeros(4194304, n);
for i = 1:n
    test     = load(files{i});
    y        = test.y(1, :)'; % The apostrophe denotes transpose.
    Z(:,i)   = y;
end
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 

rng default % For reproducibility

mixdata = S*randn(6) + randn(1,6);

figure
for i = 1:6
    subplot(2,6,i)
    plot(S(:,i))
    title(['Sound ',num2str(i)])
    subplot(2,6,i+6)
    plot(mixdata(:,i))
    title(['Mix ',num2str(i)])
end


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA
mixzeta = Z*randn(n) + randn(1,n);

figure
for i = 1:n
    subplot(2,n,i)
    plot(Z(:,i))
    title(['Source Zeta ',num2str(i)])
    subplot(2,n,i+n)
    plot(mixzeta(:,i))
    title(['Unmix Zeta ',num2str(i)])
end
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 

mixdata = prewhiten(mixdata);
figure
histogram(S(:,1))


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA
mixzeta = prewhiten(mixzeta);
figure
histogram(Z(:,2))
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 

q = 6;
Mdl = rica(mixdata,q,'NonGaussianityIndicator',ones(6,1));
unmixed = transform(Mdl,mixdata);


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA
q = n;
Model = rica(mixzeta,q, 'VerbosityLevel', 1, 'GradientTolerance',1e-7, 'StepTolerance',1e-6);
Model = rica(mixzeta,q, 'VerbosityLevel', 1, 'InitialTransformWeights',Model.TransformWeights, 'GradientTolerance',1e-7, 'StepTolerance',1e-6);
unmixedzeta = transform(Model, mixzeta);
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 

figure
for i = 1:6
    subplot(2,6,i)
    plot(S(:,i))
    title(['Sound ',num2str(i)])
    subplot(2,6,i+6)
    plot(unmixed(:,i))
    title(['Unmix ',num2str(i)])
end


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA
figure
for i = 1:n
    subplot(2,n,i)
    plot(Z(:, i))
    title(['Source Zeta ',num2str(i)])
    subplot(2,n,i+n)
    plot(unmixedzeta(:,i))
    title(['Unmix Zeta ',num2str(i)])
end
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 

unmixed = unmixed(:,[2,5,4,6,3,1]);
for i = 1:6
    unmixed(:,i) = unmixed(:,i)/norm(unmixed(:,i))*norm(S(:,i));
end

figure
for i = 1:6
    subplot(2,6,i)
    plot(S(:,i))
    ylim([-1,1])
    title(['Sound ',num2str(i)])
    subplot(2,6,i+6)
    plot(unmixed(:,i))
    ylim([-1,1])
    title(['Unmix ',num2str(i)])
end


% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA 
unmixedzeta = unmixedzeta(:,[2,1]);
for i = 1:2
    unmixedzeta(:,i) = unmixedzeta(:,i)/norm(unmixedzeta(:,i))*norm(Z(:,i));
end

figure
for i = 1:n
    subplot(2,n,i)
    plot(Z(:,i))
    % ylim([-5,5])
    title(['Source Zeta ',num2str(i)])
    subplot(2,n,i+n)
    plot(unmixedzeta(:,i))
    % ylim([-5,5])
    title(['Unmix Zeta ',num2str(i)])
end
% ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA % ZETA

%% 
[h,p,k] = kstest2(Z(:, 1),unmixedzeta(:, 2),'Alpha',0.00001);


%%

function Z = prewhiten(X)
% X = N-by-P matrix for N observations and P predictors
% Z = N-by-P prewhitened matrix

    % 1. Size of X.
    [N,P] = size(X);
    assert(N >= P);

    % 2. SVD of covariance of X. We could also use svd(X) to proceed but N
    % can be large and so we sacrifice some accuracy for speed.
    [U,Sig] = svd(cov(X));
    Sig     = diag(Sig);
    Sig     = Sig(:)';

    % 3. Figure out which values of Sig are non-zero.
    tol = eps(class(X));
    idx = (Sig > max(Sig)*tol);
    assert(~all(idx == 0));

    % 4. Get the non-zero elements of Sig and corresponding columns of U.
    Sig = Sig(idx);
    U   = U(:,idx);

    % 5. Compute prewhitened data.
    mu = mean(X,1);
    Z = bsxfun(@minus,X,mu);
    Z = bsxfun(@times,Z*U,1./sqrt(Sig));
end